// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// See for `DATABASE_URL` parameter in the environment for the sqlite file location (under the `prisma` folder).

generator client {
  provider = "prisma-client-js"
}

// provider = "sqlite" | "postgresql", see 'prisma-switch.mjs'
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Applied data scope

model Record {
  // Unique id
  id Int @id @default(autoincrement())

  // Belonged to user (optional)
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Custom name
  name String

  // Parent-children relations
  // @see https://github.com/prisma/prisma/issues/4562#issuecomment-860176071
  children Record[] @relation("SubRecords")
  parent   Record?  @relation("SubRecords", fields: [parentId], references: [id])
  parentId Int?

  @@map("Records")
}

// System scope

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          String    @default("USER") // "USER" OR "ADMIN", instead of `UserRole` enum (unsupported in sqlite): `role UserRole  @default(USER)`
  accounts      Account[]
  sessions      Session[]

  records Record[] // Root records

  @@map("Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

// enum UserRole {
//   ADMIN
//   USER
// }
